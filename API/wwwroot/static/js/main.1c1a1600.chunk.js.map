{"version":3,"sources":["App/Models/pagination.ts","App/API/Agent.ts","App/Models/activity.ts","App/Models/profile.ts","App/Stores/activityStore.ts","App/Stores/profileStore.ts","App/Stores/userStore.ts","App/Stores/store.ts","App/Stores/commonStore.ts","App/Stores/modalStore.ts","App/Stores/commentStore.ts","App/Layout/NavBar.tsx","Features/Activities/Dashboard/ActivityFilters.tsx","Features/Profiles/FollowButton.tsx","Features/Profiles/ProfileCard.tsx","Features/Activities/Dashboard/ActivityListItemAttendee.tsx","Features/Activities/Dashboard/ActivityListItems.tsx","Features/Activities/Dashboard/ActivityList.tsx","Features/Activities/Dashboard/ActivityListItemPlaceholder.tsx","Features/Activities/Dashboard/ActivityDashboard.tsx","App/Common/Form/MyTextInput.tsx","Features/Users/LoginForm.tsx","Features/Errors/ValidationErrors.tsx","Features/Users/RegisterForm.tsx","Features/Home/HomePage.tsx","App/Layout/LoadingComponents.tsx","App/Common/Form/MyTextArea.tsx","App/Common/Form/MySelectInput.tsx","App/Common/Options/categoryOptions.ts","App/Common/Form/MyDateInput.tsx","Features/Activities/Form/ActivityForm.tsx","Features/Activities/Details/ActivityDetailedChat.tsx","Features/Activities/Details/ActivityDetailedHeader.tsx","Features/Activities/Details/ActivityDetailedInfo.tsx","Features/Activities/Details/ActivityDetailedSIdeBar.tsx","Features/Activities/Details/ActivityDetails.tsx","Features/Errors/TestError.tsx","Features/Errors/NotFound.tsx","Features/Errors/ServerError.tsx","App/Common/Modals/ModalContainer.tsx","Features/Profiles/Form/ProfileEditForm.tsx","Features/Profiles/ProfileAbout.tsx","Features/Profiles/ProfileActivities.tsx","Features/Profiles/ProfileFollowings.tsx","App/Common/ImageUpload/PhotoWidgetCropper.tsx","App/Common/ImageUpload/PhotoWidgetDropzone.tsx","App/Common/ImageUpload/PhotoUploadWidget.tsx","Features/Profiles/ProfilePhotos.tsx","Features/Profiles/ProfileContent.tsx","Features/Profiles/ProfileHeader.tsx","Features/Profiles/ProfilePage.tsx","App/Layout/PrivateRoute.tsx","App/Common/Util/hooks.ts","Features/Users/RegisterSuccess.tsx","Features/Users/ConfirmEmail.tsx","App/Layout/App.tsx","reportWebVitals.ts","App/Layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollwing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","activities","setActivity","setPagination","setLoadingInitial","console","log","setPagingParams","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","deleteActivity","updateAttendence","filter","updateAttendeeFollowing","following","followersCount","cancelActivityToggle","isCanceled","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","entries","activityByDate","reduce","format","URLSearchParams","toString","toISOString","ProfileStore","loadingProfile","uploading","loadingFollowings","followings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","loadFollowings","loadUserActivities","setDisplayName","updateFollowing","activityStore","followingCount","photo","photos","isMain","setImage","p","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","modalStore","closeModal","setToken","startRefreshTokenTimer","getFacebookLoginStatus","window","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getUser","name","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","stopHubConnection","stop","clearComments","addComment","activityId","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","DropdownMenu","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItems","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","MessageList","err","i","MessageItem","userName","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","handleCancelForm","location","pathname","includes","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","activty","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","maxImageSize","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","event","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.1c1a1600.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data:T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport Activity, { ActivityFormValues } from \"../Models/activity\";\r\nimport { PaginatedResult } from \"../Models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../Models/profile\";\r\nimport { User, UserFormValues } from \"../Models/user\";\r\nimport { store } from \"../Stores/store\";\r\n\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) {\r\n        config.headers!.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n})\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n    \r\n    const pagination = response.headers[\"pagination\"];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const{data, status, config, headers} = error.response!;\r\n    \r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && 'id' in data.errors) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                };\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers[\"www-authenticate\"]?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error(\"Session expired please login again\");\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push(\"/not-found\");\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(\"/activities\", {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(\"/activities\", activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>(\"/account\"),\r\n    login: (user: UserFormValues) => requests.post<User>(\"/account/login\", user),\r\n    register: (user: UserFormValues) => requests.post<User>(\"/account/register\", user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) => requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) => requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append(\"File\", file);\r\n        return axios.post<Photo>(\"photos\", formData, {\r\n            headers: {\"Content-type\": \"multipart/form-data\"}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollwing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n}\r\n\r\nexport default agent","import { Profile } from \"./profile\";\r\n\r\nexport default interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCanceled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\n\r\nexport default class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\n\r\nexport class ActivityFormValues{\r\n    id?: string = undefined;\r\n    title: string = \"\";\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date: Date | null = null;\r\n    city: string = \"\";\r\n    venue: string = \"\";\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    \r\n    constructor (user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../API/Agent\";\r\nimport Activity, { ActivityFormValues } from \"../Models/activity\";\r\nimport { Pagination, PagingParams } from \"../Models/pagination\";\r\nimport { Profile } from \"../Models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set(\"all\", true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(), \r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    get activityByDate() {\r\n        return Array\r\n                .from(this.activityRegistry\r\n                    .values())\r\n                    .sort((a, b) => a.date!.getTime() - b.date!.getTime())\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activityByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, \"dd MMM yyyy\");\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') {\r\n                    this.predicate.delete(key);\r\n                }\r\n            });\r\n        }\r\n        \r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const activities = await agent.Activities.list(this.axiosParams);\r\n            activities.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(activities.pagination)\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n       \r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            \r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            \r\n            this.setActivity(newActivity);\r\n            \r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async(activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updateActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\r\n                    this.selectedActivity = updateActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendence = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        \r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCanceled = !this.selectedActivity?.isCanceled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../API/Agent\";\r\nimport { Photo, Profile, UserActivity } from \"../Models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    loadingFollowings = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate)\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => this.profile = profile)\r\n        } catch (error) {\r\n            console.log(error) \r\n        } finally {\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollwing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && \r\n                    this.profile.username !== store.userStore.user?.username &&\r\n                    this.profile.username === username) {\r\n\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            \r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally{\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    store.activityStore.loadActivities();\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../API/Agent\";\r\nimport { User, UserFormValues } from \"../Models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: fb.AuthResponse | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n           history.push(\"/activities\");\r\n           store.modalStore.closeModal();\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (authResponse: fb.AuthResponse) => {\r\n\r\n            if (authResponse === null) {\r\n                runInAction(() => this.fbLoading = false)\r\n                return;\r\n            }\r\n            \r\n            agent.Account.fbLogin(authResponse.accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities')\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push(\"/\");\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction (() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) {\r\n            this.user.displayName = name;\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (30 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../Models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem(\"jwt\");\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction (\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem(\"jwt\", token);\r\n                } else {\r\n                    window.localStorage.removeItem(\"jwt\");\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n    \r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n }","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\n\r\nexport default class ModalStore {\r\n   modal: Modal = {\r\n       open: false,\r\n       body: null,\r\n   }\r\n\r\n   constructor() {\r\n       makeAutoObservable(this);\r\n   }\r\n\r\n   openModal = ((content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n   })\r\n\r\n   closeModal = () => {\r\n       this.modal.open = false;\r\n       this.modal.body = null\r\n   }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../Models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activity: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n           this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL + \"?activityId=\" + activity, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start()\r\n                .catch(error => console.log(\"error establishing the connection \", error));\r\n            \r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + \"Z\");\r\n                    })\r\n                    this.comments = comments;\r\n                })\r\n            })\r\n\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.push(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping the connection \", error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown, DropdownMenu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../Stores/store\";\r\n\r\nexport default observer (function NavBar(){\r\n    const {userStore: {user, logout, isLoggedIn}} = useStore();\r\n    return(\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: 10}}/>\r\n                    Reactivties\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                <>\r\n                    <Menu.Item as={NavLink} to=\"/activities\" name=\"Activites\"/>\r\n                    <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\"/>\r\n                    <Menu.Item>\r\n                        <Button as={NavLink} to=\"/createActivity\" positive content=\"Create activity\"/>\r\n                    </Menu.Item>\r\n                    <Menu.Item position=\"right\">\r\n                        <Image src={user?.image || \"/assets/user.png\"} avatar spaced='right'/>\r\n                        <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                            <DropdownMenu>\r\n                                <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text=\"My Profile\" icon=\"user\"/>\r\n                                <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\"/>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                </>}\r\n               \r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\n\r\nexport default observer (function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters'/>\r\n                <Menu.Item\r\n                    content=\"All Activities\"\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')} \r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')} \r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')} \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </Fragment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) {\r\n        return null;\r\n    }\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ?\r\n            updateFollowing(username, false) :\r\n            updateFollowing(username, true);\r\n    }\r\n\r\n    return(\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    color=\"teal\"\r\n                    content={profile.following ? 'Following' : 'Not Following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer (function ProfileCard ({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + \"...\" : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || \"/assets/user.png\"} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name=\"user\"/>\r\n                {profile.followersCount} followers\r\n                <FollowButton profile={profile}/>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../App/Models/profile\";\r\nimport ProfileCard from \"../../Profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer (function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => {\r\n                return (\r\n                    <Popup\r\n                        hoverable\r\n                        key={attendee.username}\r\n                        trigger={\r\n                            <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                                <Image\r\n                                    size=\"mini\"\r\n                                    circular\r\n                                    src={attendee.image || '/assets/user.png'}\r\n                                    bordered\r\n                                    style={attendee.following ? styles : null}\r\n                                />\r\n                            </List.Item>\r\n                        }\r\n                    >\r\n                        <Popup.Content>\r\n                            <ProfileCard profile={attendee}/>\r\n                        </Popup.Content>\r\n\r\n                    </Popup>\r\n                   \r\n                )\r\n            })}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport Activity from \"../../../App/Models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItems({activity} : Props) {\r\n\r\n    return (\r\n       <Segment.Group>\r\n           <Segment>\r\n               {activity.isCanceled &&\r\n                <Label attached=\"top\" color=\"red\" content=\"Cancelled\" style={{textAlign: \"center\"}} />\r\n               }\r\n               <Item.Group>\r\n                   <Item>\r\n                       <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image ||'/assets/user.png'} />\r\n                       <Item.Content>\r\n                           <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                           <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                           {activity.isHost && (\r\n                               <Item.Description>\r\n                                   <Label basic color=\"orange\">\r\n                                        You are hosting the activity\r\n                                   </Label>\r\n                               </Item.Description>\r\n                           )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                               <Item.Description>\r\n                                   <Label basic color=\"green\">\r\n                                        You are going to this activity\r\n                                   </Label>\r\n                               </Item.Description>\r\n                           )}\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n           <Segment>\r\n               <span>\r\n                   <Icon name='clock' /> {format(activity.date!, 'dd MMM yyy h:mm aa')}\r\n                   <Icon name='marker' /> {activity.venue}\r\n               </span>\r\n           </Segment>\r\n           <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n           </Segment>\r\n           <Segment clearing>\r\n               <span>{activity.description}</span>\r\n               <Button\r\n                    as={Link}\r\n                    to={`activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport {Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport ActivityListItems from \"./ActivityListItems\";\r\n\r\nexport default observer (function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const { groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            {groupedActivities.map(([group, activities]) => (  \r\n                <Fragment key={group}>\r\n                    <Header sub color=\"teal\">\r\n                        {group}\r\n                    </Header>\r\n                        {activities.map((activity) => {\r\n                            return(\r\n                                <ActivityListItems key={activity.id} activity={activity}/>\r\n                            )\r\n                        })}\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../App/Models/pagination\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer (function ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n    \r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) {\r\n            loadActivities();\r\n        }\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ):(\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n               <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../App/Common/Form/MyTextInput\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\nexport default observer (function LoginForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues={{email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as=\"h2\" content=\"Login to Reactivites\" color=\"teal\" textAlign=\"center\"/>\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\" render={() => \r\n                        <Label style={{marginBottom: 10}} basic color=\"red\" content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content=\"Login\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message, MessageItem, MessageList } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return(\r\n        <Message error>\r\n            {errors && (\r\n                <MessageList>\r\n                    {errors.map((err: any, i: any) => {\r\n                        return <MessageItem key={i}>{err}</MessageItem>\r\n                    })}\r\n                </MessageList>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../App/Common/Form/MyTextInput\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport * as Yup from \"yup\";\r\nimport ValidationErrors from \"../Errors/ValidationErrors\";\r\n\r\nexport default observer (function RegisterForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n        <Formik\r\n            initialValues={{displayName:\"\", userName:\"\", email: \"\", password: \"\", error: null}}\r\n            \r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error =>\r\n                setErrors({error}))}\r\n\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                userName: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as=\"h2\" content=\"Sign up to Reactivites\" color=\"teal\" textAlign=\"center\"/>\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                    <MyTextInput name=\"userName\" placeholder=\"Username\"/>\r\n                    <MyTextInput name=\"email\" placeholder=\"email\"/>\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\" render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content=\"Register\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Divider, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport LoginForm from \"../Users/LoginForm\";\r\nimport RegisterForm from \"../Users/RegisterForm\";\r\n\r\nexport default observer (function HomePage(){\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Fragment>\r\n            <Segment inverted textAlign='center' vertical className='masthead'>\r\n                <Container text>\r\n                    <Header as='h1' inverted>\r\n                        <Image size='massive' src='assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\r\n                        Reactivities\r\n                    </Header>\r\n                    {userStore.isLoggedIn ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities'/>\r\n                            <Button as={Link} to='/activities' size='huge' inverted content='Go to activites'/>\r\n                        </>\r\n                    ): (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted content='Login'/>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted content='Register'/>\r\n                            <Divider horizontal inverted>Or</Divider>\r\n                            <Button\r\n                                loading={userStore.fbLoading}\r\n                                size=\"huge\"\r\n                                inverted\r\n                                color=\"facebook\"\r\n                                content='Login with Facebook'\r\n                                onClick={userStore.facebookLogin}\r\n                                disabled={userStore.fbLoading}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Container>\r\n            </Segment>\r\n        </Fragment>\r\n    )\r\n})","import React from \"react\";\r\nimport {Dimmer, Loader} from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = \"Loading...\"}: Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: \"Drinks\", value: \"drinks\"},\r\n    {text: \"Culture\", value: \"culture\"},\r\n    {text: \"Film\", value: \"film\"},\r\n    {text: \"Food\", value: \"food\"},\r\n    {text: \"Music\", value: \"music\"},\r\n    {text: \"Trave\", value: \"travel\"},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../App/Layout/LoadingComponents\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport {v4 as uuid} from \"uuid\"\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../App/Common/Form/MyTextInput\";\r\nimport MyTextArea from \"../../../App/Common/Form/MyTextArea\";\r\nimport MySelectInput from \"../../../App/Common/Form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../App/Common/Options/categoryOptions\";\r\nimport MyDateInput from \"../../../App/Common/Form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../App/Models/activity\";\r\n\r\nexport default observer (function ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const{createActivity, updateActivity,\r\n            loadActivity, loadingInitial, setLoadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\"The activity description is required\"),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required(\"Date is required\").nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n    \r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id)\r\n            .then(activity => setActivity(new ActivityFormValues(activity)));\r\n        } else {\r\n            setLoadingInitial(false);\r\n        }\r\n    }, [id, loadActivity, setLoadingInitial])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    function handleCancelForm() {\r\n        return history.location.pathname.includes(\"manage\") ?\r\n            `/activities/${id}` :\r\n            '/activities';\r\n    }\r\n\r\n    if (loadingInitial) {\r\n        return <LoadingComponent content={\"Loading activity....\"} />\r\n    }\r\n\r\n    return (\r\n        <Segment clearing>\r\n            {console.log(id)}\r\n            {console.log(handleCancelForm())}\r\n            <Header content='Activity Details ' sub color=\"teal\" />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}\r\n                >\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => {\r\n                    return(\r\n                     <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <MyTextInput placeholder=\"Tile\" name=\"title\"></MyTextInput>\r\n                        <MyTextArea rows={3} placeholder=\"Description\" name='description'></MyTextArea>\r\n                        <MySelectInput options={categoryOptions} placeholder=\"Category\" name='category'></MySelectInput>\r\n                        <MyDateInput\r\n                            placeholderText=\"Date\"\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption=\"time\"\r\n                            dateFormat= \"MMMM d, yyyy h:mm aa\"\r\n                        />\r\n                        <Header content='Loacation Details ' sub color=\"teal\" />\r\n                        <MyTextInput placeholder=\"City\" name='city'></MyTextInput>\r\n                        <MyTextInput placeholder=\"Venue\" name='venue'></MyTextInput>\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated=\"right\"\r\n                            positive\r\n                            type=\"submit\"\r\n                            content=\"Submit\" \r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            to={handleCancelForm()}\r\n                            floated=\"right\"\r\n                            type=\"submit\"\r\n                            content=\"Cancel\"\r\n                        />\r\n                    </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react';\r\nimport { useStore } from '../../../App/Stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n\r\n    const {commentStore} = useStore();\r\n    \r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) =>{\r\n                        commentStore.addComment(values).then(() => resetForm());\r\n                    }}\r\n                    initialValues={{body: \"\"}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                {({isSubmitting, isValid, handleSubmit}) => (\r\n                    <Form className='ui form'>\r\n                        <Field name='body'>\r\n                            {(props: FieldProps) => (\r\n                                <div style={{position:\"relative\"}}>\r\n                                    <Loader active={isSubmitting} />\r\n                                    <textarea\r\n                                        placeholder='Enter your comment (ENTER to submit, SHIFT + ENTER for new line)'\r\n                                        rows={2}\r\n                                        {...props.field}\r\n                                        onKeyPress={e => {\r\n                                            if (e.key === 'Enter' && e.shiftKey) {\r\n                                                return;\r\n                                            }\r\n\r\n                                            if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                    </Form>\r\n                )}\r\n                </Formik>\r\n                <Comment.Group className='reverse'>\r\n                    {commentStore.comments.map(comment => {\r\n                         return (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        )\r\n                    })}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react';\r\nimport Activity from '../../../App/Models/activity';\r\nimport { useStore } from '../../../App/Stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendence, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCanceled &&\r\n                    <Label style={{position: \"absolute\", zIndex: 1000, left: -14, top: 20}}\r\n                        ribbon color='red' content=\"Cancelled\"/>\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCanceled ? \"green\" : \"red\"}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCanceled ? \"Re-Activate Activity\" : \"Cancel Activity\"}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            disabled={activity.isCanceled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'\r\n                            content=\"Manage Event\"\r\n                        />\r\n                     </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendence}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        loading={loading}\r\n                        disabled={activity.isCanceled}\r\n                        onClick={updateAttendence}\r\n                        color='teal' \r\n                        content=\"Join Activity\"\r\n                    />\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport Activity from '../../../App/Models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                        {format(activity.date!, \"MMMM d, yyyy h:mm aa\")}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport Activity from '../../../App/Models/activity'\r\n\r\n\r\ninterface Props {\r\n    activty: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activty: {attendees, host}}: Props) {\r\n    if (!attendees) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => {\r\n                        return (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                        <Image size='tiny' src={attendee.image ||'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                            </Item.Header>\r\n                            {attendee.following &&\r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                        </Item.Content>\r\n                    </Item>)\r\n                    })}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../App/Layout/LoadingComponents\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSideBar from \"./ActivityDetailedSIdeBar\";\r\n\r\n\r\nexport default observer (function ActivityDetails() {\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id);\r\n        }\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/> \r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSideBar activty={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && <ValidationErrors errors={errors} />}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to={`/activities`} content=\"Return to activities page\"/>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\nexport default observer (function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='ServerError' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../Stores/store\";\r\n\r\nexport default observer (function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport * as Yup from 'yup';\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../../App/Common/Form/MyTextInput\";\r\nimport MyTextArea from \"../../../App/Common/Form/MyTextArea\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nexport default observer (function ProfileEditForm ({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(\"Display name is required\")\r\n            })}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => setEditMode(false));\r\n            }}\r\n        >\r\n            {({handleSubmit, isSubmitting, isValid, dirty}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit}>\r\n                    <MyTextInput placeholder=\"Display Name\" name=\"displayName\"/>\r\n                    <MyTextArea rows={3} placeholder=\"Add yout bio\" name=\"bio\"/>\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content=\"Update profile\"\r\n                        floated=\"right\"\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileEditForm from \"./Form/ProfileEditForm\";\r\n\r\n\r\nexport default observer(function ProfileAbout(){\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated=\"left\"\r\n                            icon='user'\r\n                            content={`About ${profile?.displayName}`} \r\n                    />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated=\"right\"\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'> \r\n                    {editMode ?\r\n                        <ProfileEditForm setEditMode={setEditMode}/> :\r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from \"../../App/Models/profile\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst panes = [\r\n    {menuItem: \"Future Events\", pane: { key: \"future\" } },\r\n    {menuItem: \"Past Events\", pane: { key: \"past\" } },\r\n    {menuItem: \"Hosting\", pane: { key: \"host\" } },\r\n];\r\n\r\nexport default observer(function ProfileActivities(){\r\n    const {profileStore} = useStore();\r\n    const {\r\n        profile,\r\n        loadUserActivities,\r\n        loadingActivities,\r\n        userActivities,\r\n    } = profileStore;\r\n    \r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile])\r\n\r\n    const handleChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    }\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon='calendar' content={'Activities'}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab \r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src = {`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                /> \r\n                                <Card.Content>\r\n                                    <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign=\"center\">\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer (function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated=\"left\"\r\n                        icon='user'\r\n                        content={\r\n                            activeTab === 3 ?\r\n                            `People following ${profile?.displayName}` : \r\n                            `People ${profile?.displayName} is following`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile}/>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper ) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        < Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width:\"100%\"}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: \"dashed 3px #eee\",\r\n        borderColor: \"#eee\",\r\n        borderRadius: \"5px\",\r\n        paddingTop: \"30px\",\r\n        textAlign: \"center\" as 'center',\r\n        height: 200,\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: \"green\",\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n       setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n           preview: URL.createObjectURL(file)\r\n       })));\r\n    }, [setFiles])\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name=\"upload\" size='huge'/>\r\n            <Header content=\"Drop image here\" />\r\n            <Header size='tiny' color='red' content='*Max 10 mb'/>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport { Cropper } from 'react-cropper';\r\nimport { toast } from \"react-toastify\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const maxImageSize = 15438731;\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>()\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 2 - Resize' />\r\n                {   \r\n                    files && \r\n                    files.length > 0 && \r\n                    files[0].size > maxImageSize && \r\n                    (toast.error(\"File is too large\")) && \r\n                    <span></span>    \r\n                }\r\n\r\n                {\r\n                    files &&\r\n                    files.length > 0 &&\r\n                    files[0].size < maxImageSize && \r\n                    (<PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />)\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 3 - Upload' />\r\n                {files && files.length > 0 && files[0].size < maxImageSize &&\r\n                    <>\r\n                    <div className=\"img-preview\" style={{minHeight: 200, overflow: \"hidden\", marginBottom: \"10px\"}}/>\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../App/Common/ImageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../App/Models/profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer (function ProfilePhotos({profile}: Props) {\r\n    const {\r\n        profileStore: {isCurrentUser, uploadPhoto, \r\n        uploading, loading, setMainPhoto, deletePhoto}\r\n    } = useStore();\r\n\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(event.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(event.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon='image' content='Photos'/>\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated=\"right\"\r\n                            basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color=\"green\"\r\n                                                content=\"Main\"\r\n                                                name={\"main\" + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === \"main\" + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"red\"\r\n                                                icon=\"trash\"\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer (function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: \"About\", render: () => <ProfileAbout /> },\r\n        {menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile}/> },\r\n        {menuItem: \"Events\", render: () => <ProfileActivities /> },\r\n        {menuItem: \"Followers\", render: () => <ProfileFollowings /> },\r\n        {menuItem: \"Following\", render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer (function ProfileHeader({profile}: Props) {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile?.image ||'/assets/user.png'} />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header as='h1' content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount}/>\r\n                        <Statistic label='Following' value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../App/Layout/LoadingComponents\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer (function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) {\r\n        return <LoadingComponent content=\"Loading profile...\" />\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile}/>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../Stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore:{ isLoggedIn } } = useStore();\r\n    return(\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport agent from \"../../App/API/Agent\";\r\nimport useQuery from \"../../App/Common/Util/hooks\";\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success(\"Verification email resent - please check your email\");\r\n        }).catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign=\"center\">\r\n            <Header icon color='green'>\r\n                <Icon name=\"check\"/>\r\n                Successfully registered!\r\n            </Header>\r\n            <p>Please check your email (including junk email) for the verification email</p>\r\n            {email &&\r\n                <>\r\n                    <p>Didn't receive the email?  Click the below button to resend</p>\r\n                    <Button \r\n                        primary\r\n                        onClick={handleConfirmEmailResend}\r\n                        content='Resend email'\r\n                        size=\"huge\"/>\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport agent from \"../../App/API/Agent\";\r\nimport useQuery from \"../../App/Common/Util/hooks\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport default function ConfirmEmail(){\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying : 'Verifying',\r\n        Failed : 'Failed',\r\n        Success : 'Success',\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success(\"Verification email resent - please check your email\");\r\n        }).catch(error => console.log(error))\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() =>{\r\n            setStatus(Status.Success);\r\n        }).catch (() => {\r\n            setStatus(Status.Failed);\r\n        })\r\n    }, [Status.Success, Status.Failed, email, token])\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button primary size=\"huge\" content='Resend Email' onClick={handleConfirmEmailResend}/>\r\n                    </div>\r\n                )\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm/>)} content='Login now!' size='huge'/>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign=\"center\">\r\n            <Header icon>\r\n                <Icon name='envelope'></Icon>\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React, { Fragment, useEffect } from 'react';\r\nimport {Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../Features/Activities/Dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../Features/Home/HomePage';\r\nimport ActivityForm from '../../Features/Activities/Form/ActivityForm';\r\nimport ActivityDetails from '../../Features/Activities/Details/ActivityDetails';\r\nimport TestErrors from '../../Features/Errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../Features/Errors/NotFound';\r\nimport ServerError from '../../Features/Errors/ServerError';\r\nimport { useStore } from '../Stores/store';\r\nimport LoadingComponent from './LoadingComponents';\r\nimport ModalContainer from '../Common/Modals/ModalContainer';\r\nimport ProfilePage from '../../Features/Profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../Features/Users/RegisterSuccess';\r\nimport ConfirmEmail from '../../Features/Users/ConfirmEmail';\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) {\r\n    return <LoadingComponent content='Loading App...'></LoadingComponent>\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n       <Route exact path=\"/\" component={HomePage} />\r\n      <Route\r\n        path={\"/(.+)\"}\r\n        render={() => (\r\n          <Fragment>\r\n            <NavBar />\r\n            <Container style={{marginTop: \"7em\"}}>\r\n              <Switch>\r\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\r\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={[\"/createActivity\", \"/manage/:id\"]} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route path='/account/registerSuccess' component={RegisterSuccess} />\r\n                <Route path='/account/verifyEmail' component={ConfirmEmail} />\r\n                <Route component={NotFound}/>\r\n              </Switch>\r\n            </Container>\r\n          </Fragment>\r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './App/Layout/styles.css';\nimport App from './App/Layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './App/Stores/store';\nimport { Router} from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './App/Layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}